'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (config, callback) {
  // define default configuration options
  var defaultConfig = {
    test: /\/api\/(v[0-9]+).*/,
    entryPoint: 'app.js',
    apiPath: '',
    instance: null
  };

  // merge default configuration options with user defined config options
  var mergedConfig = _extends({}, defaultConfig, config);

  // get config options from merged configs
  var test = mergedConfig.test,
      entryPoint = mergedConfig.entryPoint,
      apiPath = mergedConfig.apiPath,
      instance = mergedConfig.instance;


  return function (httpRequest, httpResponse, next) {
    if (!apiPath) {
      // throw an error if the apiPath is not specified
      return callback({
        code: 101,
        message: 'You must explicitly specify a path to where the APIs reside'
      }, httpRequest, httpResponse, next);
    }

    if (!instance) {
      // throw an error if the express instance is undefined
      return callback({
        code: 102,
        message: 'You must explicitly set an instance of express'
      }, httpRequest, httpResponse, next);
    }

    if (typeof instance !== 'function') {
      // throw an error if the instance is not a function
      /* istanbul ignore next */
      return callback({
        code: 105,
        message: 'An instance of express must be a function but got type ' + (typeof instance === 'undefined' ? 'undefined' : _typeof(instance))
      }, httpRequest, httpResponse, next);
    }

    // test if the version number/type exist in the url
    var testUrl = httpRequest.url.match(test);
    var version = testUrl ? testUrl[1] : '';

    if (version) {
      // if we have the version number/type in url
      // normalize path to the entry point
      var fullPath = _path2.default.normalize(apiPath + '/' + version + '/' + entryPoint);
      if (_fs2.default.existsSync(fullPath)) {
        // check if the entry point exist
        /* istanbul ignore else */
        if (typeof require(fullPath).default === 'function') {
          require(fullPath).default(instance); // import the entry point
        } else {
          require(fullPath)(instance);
        }
        return callback(null, httpRequest, httpResponse, next);
      }
      return callback({
        code: 103,
        message: 'Entry point not Found'
      }, httpRequest, httpResponse, next); // we can't find the entry point, throw an error
    }
    // we can't find the version number from the url, throw an error
    return callback({
      code: 104,
      message: 'No version number found'
    }, httpRequest, httpResponse, next);
  };
};