'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _supertest = require('supertest');

var _supertest2 = _interopRequireDefault(_supertest);

var _index = require('../index');

var _index2 = _interopRequireDefault(_index);

var _config = require('./config');

var _config2 = _interopRequireDefault(_config);

var _server = require('./mock/server');

var _server2 = _interopRequireDefault(_server);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var request = (0, _supertest2.default)(_server2.default);
var expect = _chai2.default.expect;

_config2.default.apiPath = _path2.default.join(__dirname, './mock/api');
var newConfig = void 0;

describe('Express API Versioning', function () {
  it('should throw an error when api path is not explicitly set', function () {
    newConfig = _extends({}, _config2.default, {
      apiPath: ''
    });
    expect((0, _index2.default)(newConfig, function (error) {
      return error.message;
    })()).to.equal('You must explicitly specify a path to where the APIs reside');
  });

  it('should throw an error when an instance of express is not set', function () {
    newConfig = _extends({}, _config2.default, {
      instance: ''
    });
    expect((0, _index2.default)(newConfig, function (error) {
      return error.message;
    })()).to.equal('You must explicitly set an instance of express');
  });

  it('should throw an error when api path cannot be found', function () {
    expect((0, _index2.default)(_config2.default, function (error) {
      return error.message;
    })({ url: '/api/v4' })).to.equal('Entry point not Found');
  });

  it('should throw an error when an instance of express is not a function', function () {
    newConfig = _extends({}, _config2.default, {
      instance: 'An instance'
    });
    expect((0, _index2.default)(newConfig, function (error) {
      return error.message;
    })()).to.equal('An instance of express must be a function but got type string');
  });

  it('should throw an error if the endpoint does not match the test condition', function () {
    expect((0, _index2.default)(_config2.default, function (error) {
      return error.message;
    })({ url: '/api/unknown' })).to.equal('No version number found');
  });

  it('should return 200 OK when the api route is found', function (done) {
    request.get('/api/v1/').expect(200).expect('Content-Type', /json/).end(function (err, req) {
      expect(JSON.parse(req.res.text).message).to.equal('Hello, you got to this end point successfully');
      if (err) return done(err);
      done();
    });
  });

  it('should return 200 OK when the client route is found', function (done) {
    request.get('/').expect(200).expect('Content-Type', /json/).end(function (err, req) {
      expect(JSON.parse(req.res.text).message).to.equal('You got to the client endpoint successfully');
      if (err) return done(err);
      done();
    });
  });
});